
Parse tree of

-------------------------------------
module B where
-- Test for refactor of if to case

foo x = if (odd x) then "Odd" else "Even"

foo' x = case (odd x) of
  True -> "Odd"
  False -> "Even"

main = do
  putStrLn $ show $ foo 5

mary = [1,2,3]
------------------------------------
getStuff
tokens=[
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 1, srcSpanSCol = 1, srcSpanECol = 7}),"module"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 1, srcSpanSCol = 8, srcSpanECol = 9}),"B"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 1, srcSpanSCol = 10, srcSpanECol = 15}),"where"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 2, srcSpanSCol = 1, srcSpanECol = 35}),"-- Test for refactor of if to case"),
(RealSrcSpan (SrcSpanPoint {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanCol = 1}),""),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 1, srcSpanECol = 4}),"foo"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 5, srcSpanECol = 6}),"x"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 7, srcSpanECol = 8}),"="),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 9, srcSpanECol = 11}),"if"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 12, srcSpanECol = 13}),"("),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 13, srcSpanECol = 16}),"odd"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 17, srcSpanECol = 18}),"x"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 18, srcSpanECol = 19}),")"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 20, srcSpanECol = 24}),"then"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 25, srcSpanECol = 30}),"\"Odd\""),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 31, srcSpanECol = 35}),"else"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 4, srcSpanSCol = 36, srcSpanECol = 42}),"\"Even\""),
(RealSrcSpan (SrcSpanPoint {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanCol = 1}),""),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanSCol = 1, srcSpanECol = 5}),"foo'"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanSCol = 6, srcSpanECol = 7}),"x"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanSCol = 8, srcSpanECol = 9}),"="),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanSCol = 10, srcSpanECol = 14}),"case"),
(RealSrcSpan (SrcSpanOneLine {srcSpanFile = "./B.hs", srcSpanLine = 6, srcSpanSCol = 15, srcSpanECol = 16}),"("),
...
-------------------------------------

(L {B.hs:1:1} 
 (HsModule 
  (Just 
   (L {B.hs:1:8} {ModuleName: B})) 
  (Nothing) 
  [] 
  [
   (L {B.hs:4:1-41} 
    (ValD 
     (FunBind 
      (L {B.hs:4:1-3} 
       (Unqual {OccName: foo})) 
      (False) 
      (MatchGroup 
       [
        (L {B.hs:4:1-41} 
         (Match 
          [
           (L {B.hs:4:5} 
            (VarPat 
             (Unqual {OccName: x})))] 
          (Nothing) 
          (GRHSs 
           [
            (L {B.hs:4:9-41} 
             (GRHS 
              [] 
              (L {B.hs:4:9-41} 
               (HsIf 
                (Just 
                 (HsLit 
                  (HsString {FastString: "noSyntaxExpr"}))) 
                (L {B.hs:4:12-18} 
                 (HsPar 
                  (L {B.hs:4:13-17} 
                   (HsApp 
                    (L {B.hs:4:13-15} 
                     (HsVar 
                      (Unqual {OccName: odd}))) 
                    (L {B.hs:4:17} 
                     (HsVar 
                      (Unqual {OccName: x}))))))) 
                (L {B.hs:4:25-29} 
                 (HsLit 
                  (HsString {FastString: "Odd"}))) 
                (L {B.hs:4:36-41} 
                 (HsLit 
                  (HsString {FastString: "Even"})))))))] 
           (EmptyLocalBinds))))] {!type placeholder here?!}) 
      (WpHole) {!NameSet placeholder here!} 
      (Nothing)))),
   (L {B.hs:(6,1)-(8,17)} 
    (ValD 
     (FunBind 
      (L {B.hs:6:1-4} 
       (Unqual {OccName: foo'})) 
      (False) 
      (MatchGroup 
       [
        (L {B.hs:(6,1)-(8,17)} 
         (Match 
          [
           (L {B.hs:6:6} 
            (VarPat 
             (Unqual {OccName: x})))] 
          (Nothing) 
          (GRHSs 
           [
            (L {B.hs:(6,10)-(8,17)} 
             (GRHS 
              [] 
              (L {B.hs:(6,10)-(8,17)} 
               (HsCase 
                (L {B.hs:6:15-21} 
                 (HsPar 
                  (L {B.hs:6:16-20} 
                   (HsApp 
                    (L {B.hs:6:16-18} 
                     (HsVar 
                      (Unqual {OccName: odd}))) 
                    (L {B.hs:6:20} 
                     (HsVar 
                      (Unqual {OccName: x}))))))) 
                (MatchGroup 
                 [
                  (L {B.hs:7:3-15} 
                   (Match 
                    [
                     (L {B.hs:7:3-6} 
                      (ConPatIn 
                       (L {B.hs:7:3-6} 
                        (Unqual {OccName: True})) 
                       (PrefixCon 
                        [])))] 
                    (Nothing) 
                    (GRHSs 
                     [
                      (L {B.hs:7:11-15} 
                       (GRHS 
                        [] 
                        (L {B.hs:7:11-15} 
                         (HsLit 
                          (HsString {FastString: "Odd"})))))] 
                     (EmptyLocalBinds)))),
                  (L {B.hs:8:3-17} 
                   (Match 
                    [
                     (L {B.hs:8:3-7} 
                      (ConPatIn 
                       (L {B.hs:8:3-7} 
                        (Unqual {OccName: False})) 
                       (PrefixCon 
                        [])))] 
                    (Nothing) 
                    (GRHSs 
                     [
                      (L {B.hs:8:12-17} 
                       (GRHS 
                        [] 
                        (L {B.hs:8:12-17} 
                         (HsLit 
                          (HsString {FastString: "Even"})))))] 
                     (EmptyLocalBinds))))] {!type placeholder here?!})))))] 
           (EmptyLocalBinds))))] {!type placeholder here?!}) 
      (WpHole) {!NameSet placeholder here!} 
      (Nothing)))),
   (L {B.hs:(10,1)-(11,25)} 
    (ValD 
     (FunBind 
      (L {B.hs:10:1-4} 
       (Unqual {OccName: main})) 
      (False) 
      (MatchGroup 
       [
        (L {B.hs:(10,1)-(11,25)} 
         (Match 
          [] 
          (Nothing) 
          (GRHSs 
           [
            (L {B.hs:(10,8)-(11,25)} 
             (GRHS 
              [] 
              (L {B.hs:(10,8)-(11,25)} 
               (HsDo 
                (DoExpr) 
                [
                 (L {B.hs:11:3-25} 
                  (ExprStmt 
                   (L {B.hs:11:3-25} 
                    (OpApp 
                     (L {B.hs:11:3-17} 
                      (OpApp 
                       (L {B.hs:11:3-10} 
                        (HsVar 
                         (Unqual {OccName: putStrLn}))) 
                       (L {B.hs:11:12} 
                        (HsVar 
                         (Unqual {OccName: $}))) {!fixity placeholder here?!} 
                       (L {B.hs:11:14-17} 
                        (HsVar 
                         (Unqual {OccName: show}))))) 
                     (L {B.hs:11:19} 
                      (HsVar 
                       (Unqual {OccName: $}))) {!fixity placeholder here?!} 
                     (L {B.hs:11:21-25} 
                      (HsApp 
                       (L {B.hs:11:21-23} 
                        (HsVar 
                         (Unqual {OccName: foo}))) 
                       (L {B.hs:11:25} 
                        (HsOverLit 
                         (OverLit 
                          (HsIntegral 
                           (5)) 
                          (<interactive>: panic! (the 'impossible' happened)
  (GHC version 7.4.1 for i386-unknown-linux):
	noRebindableInfo


-- ---------------------------------------------------------------------

Detailed tokens
--------------------
module FreeAndDeclared.Declare where

toplevel :: Integer -> Integer
toplevel x = c * x
 
c,d :: Integer
c = 7
d = 9

-- Pattern bind
tup :: (Int, Int)
h :: Int
t :: Int
tup@(h,t) = head $ zip [1..10] [3..15]

data D = A | B String | C

unD (B y) = y

-- Infix data constructor, see http://stackoverflow.com/a/6420943/595714
data F = G | (:|) String String

unF (a :| b) = (a,b)

main = do
  a <- getChar
  putStrLn "foo"

--------------------
[(((1,1),(1,7)),ITmodule,"module"),
(((1,8),(1,31)),ITqconid ("FreeAndDeclared","Declare"),"FreeAndDeclared.Declare"),
(((1,32),(1,37)),ITwhere,"where"),
(((3,1),(3,1)),ITvocurly,""),
(((3,1),(3,9)),ITvarid "toplevel","toplevel"),
(((3,10),(3,12)),ITdcolon,"::"),
(((3,13),(3,20)),ITconid "Integer","Integer"),
(((3,21),(3,23)),ITrarrow,"->"),
(((3,24),(3,31)),ITconid "Integer","Integer"),
(((4,1),(4,1)),ITsemi,""),
(((4,1),(4,9)),ITvarid "toplevel","toplevel"),
(((4,10),(4,11)),ITvarid "x","x"),
(((4,12),(4,13)),ITequal,"="),
(((4,14),(4,15)),ITvarid "c","c"),
(((4,16),(4,17)),ITstar,"*"),
(((4,18),(4,19)),ITvarid "x","x"),
(((6,1),(6,1)),ITsemi,""),
(((6,1),(6,2)),ITvarid "c","c"),
(((6,2),(6,3)),ITcomma,","),
(((6,3),(6,4)),ITvarid "d","d"),
(((6,5),(6,7)),ITdcolon,"::"),
(((6,8),(6,15)),ITconid "Integer","Integer"),
(((7,1),(7,1)),ITsemi,""),
(((7,1),(7,2)),ITvarid "c","c"),
(((7,3),(7,4)),ITequal,"="),
(((7,5),(7,6)),ITinteger 7,"7"),
(((8,1),(8,1)),ITsemi,""),
(((8,1),(8,2)),ITvarid "d","d"),
(((8,3),(8,4)),ITequal,"="),
(((8,5),(8,6)),ITinteger 9,"9"),
(((10,1),(10,16)),ITlineComment "-- Pattern bind","-- Pattern bind"),
(((11,1),(11,1)),ITsemi,""),
(((11,1),(11,4)),ITvarid "tup","tup"),
(((11,5),(11,7)),ITdcolon,"::"),
(((11,8),(11,9)),IToparen,"("),
(((11,9),(11,12)),ITconid "Int","Int"),
(((11,12),(11,13)),ITcomma,","),
(((11,14),(11,17)),ITconid "Int","Int"),
(((11,17),(11,18)),ITcparen,")"),
(((12,1),(12,1)),ITsemi,""),(((12,1),(12,2)),ITvarid "h","h"),(((12,3),(12,5)),ITdcolon,"::"),(((12,6),(12,9)),ITconid "Int","Int"),(((13,1),(13,1)),ITsemi,""),(((13,1),(13,2)),ITvarid "t","t"),(((13,3),(13,5)),ITdcolon,"::"),(((13,6),(13,9)),ITconid "Int","Int"),(((14,1),(14,1)),ITsemi,""),(((14,1),(14,4)),ITvarid "tup","tup"),(((14,4),(14,5)),ITat,"@"),(((14,5),(14,6)),IToparen,"("),(((14,6),(14,7)),ITvarid "h","h"),(((14,7),(14,8)),ITcomma,","),(((14,8),(14,9)),ITvarid "t","t"),(((14,9),(14,10)),ITcparen,")"),(((14,11),(14,12)),ITequal,"="),(((14,13),(14,17)),ITvarid "head","head"),(((14,18),(14,19)),ITvarsym "$","$"),(((14,20),(14,23)),ITvarid "zip","zip"),(((14,24),(14,25)),ITobrack,"["),(((14,25),(14,26)),ITinteger 1,"1"),(((14,26),(14,28)),ITdotdot,".."),(((14,28),(14,30)),ITinteger 10,"10"),(((14,30),(14,31)),ITcbrack,"]"),(((14,32),(14,33)),ITobrack,"["),(((14,33),(14,34)),ITinteger 3,"3"),(((14,34),(14,36)),ITdotdot,".."),(((14,36),(14,38)),ITinteger 15,"15"),(((14,38),(14,39)),ITcbrack,"]"),(((16,1),(16,1)),ITsemi,""),(((16,1),(16,5)),ITdata,"data"),(((16,6),(16,7)),ITconid "D","D"),(((16,8),(16,9)),ITequal,"="),(((16,10),(16,11)),ITconid "A","A"),(((16,12),(16,13)),ITvbar,"|"),(((16,14),(16,15)),ITconid "B","B"),(((16,16),(16,22)),ITconid "String","String"),(((16,23),(16,24)),ITvbar,"|"),(((16,25),(16,26)),ITconid "C","C"),(((18,1),(18,1)),ITsemi,""),(((18,1),(18,4)),ITvarid "unD","unD"),(((18,5),(18,6)),IToparen,"("),(((18,6),(18,7)),ITconid "B","B"),(((18,8),(18,9)),ITvarid "y","y"),(((18,9),(18,10)),ITcparen,")"),(((18,11),(18,12)),ITequal,"="),(((18,13),(18,14)),ITvarid "y","y"),(((20,1),(20,73)),ITlineComment "-- Infix data constructor, see http://stackoverflow.com/a/6420943/595714","-- Infix data constructor, see http://stackoverflow.com/a/6420943/595714"),(((21,1),(21,1)),ITsemi,""),(((21,1),(21,5)),ITdata,"data"),(((21,6),(21,7)),ITconid "F","F"),(((21,8),(21,9)),ITequal,"="),(((21,10),(21,11)),ITconid "G","G"),(((21,12),(21,13)),ITvbar,"|"),(((21,14),(21,15)),IToparen,"("),(((21,15),(21,17)),ITconsym ":|",":|"),(((21,17),(21,18)),ITcparen,")"),(((21,19),(21,25)),ITconid "String","String"),(((21,26),(21,32)),ITconid "String","String"),(((23,1),(23,1)),ITsemi,""),(((23,1),(23,4)),ITvarid "unF","unF"),(((23,5),(23,6)),IToparen,"("),(((23,6),(23,7)),ITvarid "a","a"),(((23,8),(23,10)),ITconsym ":|",":|"),(((23,11),(23,12)),ITvarid "b","b"),(((23,12),(23,13)),ITcparen,")"),(((23,14),(23,15)),ITequal,"="),(((23,16),(23,17)),IToparen,"("),(((23,17),(23,18)),ITvarid "a","a"),(((23,18),(23,19)),ITcomma,","),(((23,19),(23,20)),ITvarid "b","b"),(((23,20),(23,21)),ITcparen,")"),(((25,1),(25,1)),ITsemi,""),(((25,1),(25,5)),ITvarid "main","main"),(((25,6),(25,7)),ITequal,"="),(((25,8),(25,10)),ITdo,"do"),(((26,3),(26,3)),ITvocurly,""),(((26,3),(26,4)),ITvarid "a","a"),(((26,5),(26,7)),ITlarrow,"<-"),(((26,8),(26,15)),ITvarid "getChar","getChar"),(((27,3),(27,3)),ITsemi,""),(((27,3),(27,11)),ITvarid "putStrLn","putStrLn"),(((27,12),(27,17)),ITstring "foo","\"foo\""),(((29,1),(29,1)),ITvccurly,""),(((29,1),(29,1)),ITsemi,"")]

--------------------
GHC Lexer token insertion / layout rules

When in layout mode
  If first token of a line is to the left of prior line
   - insert ITvccurly

  If first token of a line is same as prior
   - insert ITsemi

In layout mode
  -- Insert ITvocurly if line to the right of prior
  -- Insert ITvccurly if line to the left of prior


---------------------

MatchGroup
----------

Although matches only ever occur on a FunBind in the original
http://hackage.haskell.org/packages/archive/haskell-src/1.0.1.4/doc/html/Language-Haskell-Syntax.html#t:HsMatch, in GHC they appear as follows

HsBinds
  FunBind

HsExpr
 HsLam
 HsCase
 
[original has (HsLambda .. [HsPat] ..)
          and (HsCase HsExp [HsAlt])
]

------------------------------------------------

2014-02-06

Scratching through the GHC source, looking for hsVisiblePN options.
Must be in the renamer somewhere.

module TxRnTypes.lhs has a TcGlbEnv structure which is returned as one
of the fields of TypecheckedModule.

-- ----------------------------
data TcGblEnv
  = TcGblEnv {
	tcg_mod     :: Module,         -- ^ Module being compiled
	tcg_src     :: HscSource,
          -- ^ What kind of module (regular Haskell, hs-boot, ext-core)

	tcg_rdr_env :: GlobalRdrEnv,   -- ^ Top level envt; used during renaming
	tcg_default :: Maybe [Type],
          -- ^ Types used for defaulting. @Nothing@ => no @default@ decl

	tcg_fix_env   :: FixityEnv,	-- ^ Just for things in this module
	tcg_field_env :: RecFieldEnv,	-- ^ Just for things in this module

	tcg_type_env :: TypeEnv,
          -- ^ Global type env for the module we are compiling now.  All
	  -- TyCons and Classes (for this module) end up in here right away,
	  -- along with their derived constructors, selectors.
	  --
	  -- (Ids defined in this module start in the local envt, though they
	  --  move to the global envt during zonking)

	tcg_type_env_var :: TcRef TypeEnv,
		-- Used only to initialise the interface-file
		-- typechecker in initIfaceTcRn, so that it can see stuff
		-- bound in this module when dealing with hi-boot recursions
		-- Updated at intervals (e.g. after dealing with types and classes)
	....
        ....
-- -------------------------------------

The GlobalRdrEnv has



---------------------

       ; let bound_names = collectHsValBinders binds'
       ; envs <- getRdrEnvs
       ; checkDupAndShadowedNames envs bound_names
